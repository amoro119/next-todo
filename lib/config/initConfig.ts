// lib/config/initConfig.ts
import { loadDistributionConfig, getDistributionConfig } from './distributionConfig';
import { getUserState, updateUserState } from '../user/userState';
import { logConfigurationStatus } from './configValidator';

let isInitialized = false;

export const initializeAppConfig = async (): Promise<void> => {
  if (isInitialized) {
    return;
  }

  console.log('üöÄ ÂàùÂßãÂåñÂ∫îÁî®ÈÖçÁΩÆ...');

  try {
    // 1. Âä†ËΩΩÂàÜÂèëÈÖçÁΩÆ
    await loadDistributionConfig();
    const distributionConfig = getDistributionConfig();
    
    console.log(`üì¶ Â∑≤Âä†ËΩΩ ${distributionConfig.buildType} ÁâàÊú¨ÈÖçÁΩÆ`);

    // ÂºÄÂèëÁéØÂ¢É‰∏ãÔºåÊ∏ÖÈô§ÂèØËÉΩÂÜ≤Á™ÅÁöÑlocalStorageÂÄº
    if (process.env.NODE_ENV === 'development' && typeof localStorage !== 'undefined') {
      const currentSubscription = localStorage.getItem('user_subscription');
      if (currentSubscription && currentSubscription !== distributionConfig.defaultSubscription) {
        console.log(`üßπ ÂºÄÂèëÁéØÂ¢ÉÔºöÊ∏ÖÈô§ÂÜ≤Á™ÅÁöÑÁî®Êà∑ËÆ¢ÈòÖÁä∂ÊÄÅ ${currentSubscription} -> ${distributionConfig.defaultSubscription}`);
        localStorage.removeItem('user_subscription');
        localStorage.removeItem('sync_enabled');
      }
    }

    // 2. Ê£ÄÊü•Âπ∂ÂàùÂßãÂåñÁî®Êà∑Áä∂ÊÄÅ
    const userState = getUserState();
    let needsUpdate = false;
    const updates: Partial<typeof userState> = {};

    // Á°Æ‰øùÁî®Êà∑ËÆ¢ÈòÖÁä∂ÊÄÅ‰∏éÂàÜÂèëÈÖçÁΩÆ‰∏ÄËá¥
    if (userState.subscription !== distributionConfig.defaultSubscription) {
      updates.subscription = distributionConfig.defaultSubscription;
      needsUpdate = true;
      console.log(`üîß Ë∞ÉÊï¥ËÆ¢ÈòÖÁä∂ÊÄÅ‰ª•ÂåπÈÖçÂàÜÂèëÈÖçÁΩÆ: ${userState.subscription} -> ${distributionConfig.defaultSubscription}`);
    }

    // Ê†πÊçÆÂàÜÂèëÈÖçÁΩÆË∞ÉÊï¥ÂêåÊ≠•ËÆæÁΩÆ
    if (distributionConfig.buildType === 'free' && userState.syncEnabled) {
      updates.syncEnabled = false;
      needsUpdate = true;
      console.log('üîß ÂÖçË¥πÁâàÊú¨ÔºåÁ¶ÅÁî®ÂêåÊ≠•ÂäüËÉΩ');
    }

    if (needsUpdate) {
      updateUserState(updates);
    }

    // 3. È™åËØÅÈÖçÁΩÆ‰∏ÄËá¥ÊÄß
    const validation = logConfigurationStatus();

    // 4. ËÆæÁΩÆÂ∫îÁî®ÂÖÉÊï∞ÊçÆ
    if (typeof document !== 'undefined') {
      document.title = distributionConfig.appName;
      
      // ËÆæÁΩÆÂ∫îÁî®ÂõæÊ†áÔºàÂ¶ÇÊûúÊúâ‰∏çÂêåÁâàÊú¨ÁöÑÂõæÊ†áÔºâ
      const favicon = document.querySelector('link[rel="icon"]') as HTMLLinkElement;
      if (favicon && distributionConfig.buildType === 'free') {
        // ÂèØ‰ª•‰∏∫ÂÖçË¥πÁâàÊú¨ËÆæÁΩÆ‰∏çÂêåÁöÑÂõæÊ†á
        // favicon.href = '/favicon-free.ico';
      }
    }

    // 5. Ëß¶ÂèëÈÖçÁΩÆÂàùÂßãÂåñÂÆåÊàê‰∫ã‰ª∂
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('configInitialized', {
        detail: {
          distributionConfig,
          userState: getUserState(),
          validation,
        }
      }));
    }

    isInitialized = true;
    console.log('‚úÖ Â∫îÁî®ÈÖçÁΩÆÂàùÂßãÂåñÂÆåÊàê');

  } catch (error) {
    console.error('‚ùå Â∫îÁî®ÈÖçÁΩÆÂàùÂßãÂåñÂ§±Ë¥•:', error);
    throw error;
  }
};

export const isConfigInitialized = (): boolean => {
  return isInitialized;
};

export const waitForConfigInitialization = (): Promise<void> => {
  if (isInitialized) {
    return Promise.resolve();
  }

  return new Promise((resolve) => {
    const handleConfigInitialized = () => {
      window.removeEventListener('configInitialized', handleConfigInitialized);
      resolve();
    };

    window.addEventListener('configInitialized', handleConfigInitialized);
  });
};